node -v   6.9以上
npm -v    3.10以上

# 全局安装 vue-cli
sudo npm install --global vue-cli
# 测试
vue --version　
# 创建一个基于 webpack 模板的新项目
vue init webpack my-project
# 安装依赖，走你
cd my-project
npm install
npm run dev



index.html 入口文件 -> main.js -> App.vue

main.js中el:"#app"就是index.html中<div id="app"></div>.
template:'</App>'  组件调用,div...标签,满足template只有一个根标签
components:{App}  组件注册 ,App来源于  import App from './App' 中的./App

App.vue:
1.模板：html结构  template包裹，不会渲染到dom中.
2.行为：处理逻辑
3.样式：解决样式

组件间产生关系要import一下然后注册

组件：一个功能页面

嵌套子组件:
main.js 全局注册组件:
import Users from ..
Vue.component("users",Users); //第一个名字  第二个组件
一般是局部:
app.vue -> script  -> import Users from ..
		-> html -> <users></users>
export default{
	components:{
		"users":Users  “users”可以省略掉,""里面的内容就是标签  和name有关系吗?
	}
}

style scoped :域  只在范围内使用样式

嵌套demo 小白20讲内容:

新建vue文件，拷贝基本结构->填写内容->App.vue中引入,注册->template中标签调用

传值:string number boolean
传引用:array object

父传子:
抽离到app.vue组件中,标签绑定,子组件props


事件传值:
子传父:                                    事件名          传递内容
子组件中注册事件,methods方法中写this.$emit("titleChanged","子向父组件传值");  header
app.vue中绑定v-on:titleChanged="updateTitle($event)"  $event是固定的, app-header标签
app.vue:
	methods:updateTitle(title){
		this.title= title ;
			父title:传递  参数："子向父..."
	}




生命周期钩子函数：
beforeCreate:组件实例化前执行的函数.
created:组件实例化完毕，但页面未显示.   (属性绑定，dom未生成)
beforeMount:组件挂载前，页面仍未展示，但虚拟dom已经配置.  
mounted:组件挂载后，此方法执行后，页面显示.    
beforeUpdate:组件更新前，页面仍未更新，但虚拟dom已经配置.
updated:组件更新，此方法执行后，页面显示.          
beforeDestroy:组件销毁前.
destroyed:组件销毁.


路由：不网络请求，不刷新
a:网络请求，页面刷新，重新加载页面

路由模块安装:npm install vue-router --save-dev   ->  main.js:引入路由  import VueRouter from   'vue-router'  ->  Vue.use(VueRouter) ->
配置路由：
const router = new VueRouter({
	routes:[
		{path:"/",component:Home},
		{path:"/helloworld",component:Helloworld}
	],
	mode:'history' //干掉网页路径#
})
->  引入Home和Helloworld组件 import...   ->   实例化中用router,即和el同级  ->  app.vue中标签<router-view></router-view> ->  干掉# -> app.vue加入a标签链接 -> 把a替换为<router-link to="/"></router-link>


HTTP:
vue-resource:

安装模块:npm install vue-resource --save-dev
->
main.js引入import VueResource from 'vue-resource' 
->
Vue.use(VueResource)
->
Home.vue中users注释,使用接口
->
Home.vue:
created(){
	this.$http.get("http://jsonplaceholder.typicode.com/users").then((data)=>{
		console.log(data);
		this.users = data.body;
	})
}



总结:
github: https://github.com/hemiahwu/vueplaylist  代码
->小白
->深入浅出
->vue实战项目
->个人博客
->后台管理系统
->vuex从入门到开发


 * index.html: 整个项目的入口文件  
 * main.js: 整个项目的逻辑主文件  
 * Vue实例: vue的实例化对象
   包含: el / tem / com  
 * temp: 模板中可以写html / 调用其他组件  
 * <App/>:
   代表模板要执行的组件文件,跟App.vue中的name属性有关  
 * comp:
   组件组中要包含需要调用的组件名,例如上面模板调用了<App/>,那么组件组中就一定要包含App组件  
 * import:
   import用于导入需要依赖的文件,例如上方组件组中,
   想要引入App组件,那么首先要使用import引入这个组件文件  
 * import .. from ..: import 后面是自己起的名字,from后面是组件的名字


问题:
export default{
	name:和什么有关系?大小写一样?
	components:{
		x              作为标签引用
	}
}

app.vue中引入子组件:
import x  from  ..   x定义规则?  ..指路径下组件名



问题如下:
1.main.js—— 
	(1)template和compontent这两要一致,也就是下面这个意思吧！
		compontent:{A},
		template:'<A/>'
	A通常都是App,因为涉及的App有点多，有点乱.
	这里的template中的<App/>的App和上面import后面的App要保持一致吗？
	(2)import A from B: A的名称是自己起吗？大小写有要求没？大小写一致吗?           ——名称自己起
2.App.vue——
	export default{
		name:'n' ,          ——name可给可不给     
		这个name的作用是用来标识组件吗?命名规则呢？大小写一致吗?看基本都是和组件名一样，把首字母小写了；也发现和组件名一致的,依然首字母大写。

		components:{
			"a":"b"   此处的a和上面的name的内容n有关系吗?        ——这里的a指的就是template:'<A/>'
		}
	}


重点是compontent里面的内容，其他都是自定义,默认组件名是啥class起啥.
compontent里面的是组件名称,其他是调用一下.
